package com.example.gs2.pages

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.gs2.ClientViewModel
import com.example.gs2.authViewModel
import com.example.gs2.repository.Client
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddClientPage(
    navController: NavController,
    clientViewModel: ClientViewModel,
    authViewModel: authViewModel, // Adicionado para acessar nome e e-mail do usuário
    modifier: Modifier = Modifier
) {
    val coroutineScope = rememberCoroutineScope()

    // Recuperar nome e email automaticamente do authViewModel
    val userName = authViewModel.getUserName() ?: ""
    val userEmail = authViewModel.getUserEmail() ?: ""

    // Estados para os campos
    var clientName by remember { mutableStateOf(userName) } // Inicializa com o nome do usuário
    var clientCPF by remember { mutableStateOf("") }
    var clientPhone by remember { mutableStateOf("") }
    var clientEmail by remember { mutableStateOf(userEmail) } // Inicializa com o e-mail do usuário
    var clientCEP by remember { mutableStateOf("") }
    var energyGenerated by remember { mutableStateOf("") }
    var energyAvailable by remember { mutableStateOf("") }
    var energyDistributor by remember { mutableStateOf("") }

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(Color(0xFFE5F4FB))
            .padding(20.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            "Adicionar Cliente",
            fontSize = 28.sp,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(bottom = 24.dp)
        )

        TextField(
            value = clientName,
            onValueChange = { clientName = it },
            label = { Text("Nome do Cliente") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        TextField(
            value = clientCPF,
            onValueChange = { clientCPF = it },
            label = { Text("CPF") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        TextField(
            value = clientPhone,
            onValueChange = { clientPhone = it },
            label = { Text("Celular") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        TextField(
            value = clientEmail,
            onValueChange = { clientEmail = it },
            label = { Text("E-mail de Contato") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp),
            enabled = false // Desabilitado porque o valor é obtido automaticamente
        )

        TextField(
            value = clientCEP,
            onValueChange = { clientCEP = it },
            label = { Text("CEP") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        TextField(
            value = energyGenerated,
            onValueChange = { energyGenerated = it },
            label = { Text("Energia Gerada (kW/h)") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        TextField(
            value = energyAvailable,
            onValueChange = { energyAvailable = it },
            label = { Text("Energia Disponível (kW/h)") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        TextField(
            value = energyDistributor,
            onValueChange = { energyDistributor = it },
            label = { Text("Distribuidora de Energia") },
            colors = TextFieldDefaults.textFieldColors(
                containerColor = Color.White,
                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                unfocusedIndicatorColor = Color.Gray
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            shape = RoundedCornerShape(8.dp)
        )

        Spacer(modifier = Modifier.height(24.dp))

        Button(
            onClick = {
                coroutineScope.launch {
                    clientViewModel.addClient(
                        Client(
                            name = clientName,
                            cpf = clientCPF,
                            phone = clientPhone,
                            email = clientEmail,
                            cep = clientCEP,
                            energyGenerated = energyGenerated.toDoubleOrNull() ?: 0.0,
                            energyAvailable = energyAvailable.toDoubleOrNull() ?: 0.0,
                            energyDistributor = energyDistributor
                        )
                    )
                    navController.navigate("clients")
                }
            },
            enabled = clientName.isNotBlank() && clientCPF.isNotBlank() && clientPhone.isNotBlank(),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
            shape = RoundedCornerShape(8.dp)
        ) {
            Text("Adicionar Cliente", color = Color.White, fontWeight = FontWeight.SemiBold)
        }
    }
}

